package main

import (
	"context"
	"fmt"
	"log"
	"ucheba/back/db"
	desc "ucheba/back/internal/handlers"
)

func main() {
	ctx := context.Background()

	db, err := db.NewDB(ctx)
	if err != nil {
		fmt.Println(err)
	}

	service := desc.NewImplementation(db)
	if err = service.Run(); err != nil {
		log.Fatal(fmt.Errorf("listen and serve: %w", err))
	}
}

/*
Backend:
1) личный кабинет пользователя (инвостора/предпринимателя):
	1.1) Предприниматель:
		- Видеть список своих проектов (название + цель по бюджету + результат по бюджету)
		- Список инвесторов для каждого проекта (имя + сумма)
	1.2) Инвестор:
		- Список проектов в которые задонатил (проект + сумма)
		- Информация total donated (сумма по всем проектам)
	1.3) Исполнитель:
		- // TODO ...
	- Ролевая модель
2) Создание проекта для сбора денег:
	- доступно только для предпринимателя
	- пользователь задает основную информацию о проекте
	  (название, описание, необходимая сумма, этапы проекта + их описание (сроки, что планируется сделать, необходимый бюджет))
3) Донат в проект:
	- Пользователь (инвестор) выбирает на странице проектов понравившийся и переходит в него
	- Тык по кнопке
	- Вы молодец (отметка в проекте + бенефиты от предпринимателя)
4) Отслеживание прогресса проекта (даты, цели, результаты):
	- на странице проекта будет колбаска
	- можно оставлять обратную связь (и инвестор и предприниматель)
5) CRM:
	1 - учет данных по клиентам
		/исполнителям(предоставляющие ресурсы (площадь/оборудование/трудовые ресурсы) + квалификация) + аналитика по ним (какая-нибудь исторпия + отзывы + рейтинг)
		/инвесторам: возможная сумма инвестирования (заявленая), квалификация, интерисуемы профиль, проекты (в рамках данной системы + ссылки на стороние ресурсы например),
	 	/для инноваторов: пул идей, инфа по идеям (статус) + отзывы/рейтинг по инноватору
	2 - статус по проекту (мб не здесь, но надо) (проект проходит экспертизу с нашей стороны )
	3 - оповещение инвесторов/исполнителей о появлении нового инноватора

DB:
	1) Users (id, name, pass, role)
	2) Projects (id, name, desc, creator_id) ??? goals
	3) Donates (user_id, project_id, sum)
	4) Goals ()

	select sum(d.sum) from projects as p
		left join donates as d on d.project_id = p.id

	u_1 (id 1)
	u_2 (id 2)
	p_1 (id 1)
	p_2 (id 2)

	user_id | project_id | sum
	1			2			100
	1			2			200
	2			2			50

Frontend:
	1) Страница проектов
	2) Страница проекта
	3) Личный кабинет инвестора
	4) Личный кабинет предпринимателя

*/
